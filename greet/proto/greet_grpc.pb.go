// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetSErviceClient is the client API for GreetSErvice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetSErviceClient interface {
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	GreetManyTimes(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (GreetSErvice_GreetManyTimesClient, error)
}

type greetSErviceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetSErviceClient(cc grpc.ClientConnInterface) GreetSErviceClient {
	return &greetSErviceClient{cc}
}

func (c *greetSErviceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetSErvice/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetSErviceClient) GreetManyTimes(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (GreetSErvice_GreetManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetSErvice_ServiceDesc.Streams[0], "/greet.GreetSErvice/GreetManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetSErviceGreetManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetSErvice_GreetManyTimesClient interface {
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetSErviceGreetManyTimesClient struct {
	grpc.ClientStream
}

func (x *greetSErviceGreetManyTimesClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetSErviceServer is the server API for GreetSErvice service.
// All implementations must embed UnimplementedGreetSErviceServer
// for forward compatibility
type GreetSErviceServer interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	GreetManyTimes(*GreetRequest, GreetSErvice_GreetManyTimesServer) error
	mustEmbedUnimplementedGreetSErviceServer()
}

// UnimplementedGreetSErviceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetSErviceServer struct {
}

func (UnimplementedGreetSErviceServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetSErviceServer) GreetManyTimes(*GreetRequest, GreetSErvice_GreetManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetManyTimes not implemented")
}
func (UnimplementedGreetSErviceServer) mustEmbedUnimplementedGreetSErviceServer() {}

// UnsafeGreetSErviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetSErviceServer will
// result in compilation errors.
type UnsafeGreetSErviceServer interface {
	mustEmbedUnimplementedGreetSErviceServer()
}

func RegisterGreetSErviceServer(s grpc.ServiceRegistrar, srv GreetSErviceServer) {
	s.RegisterService(&GreetSErvice_ServiceDesc, srv)
}

func _GreetSErvice_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetSErviceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetSErvice/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetSErviceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetSErvice_GreetManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetSErviceServer).GreetManyTimes(m, &greetSErviceGreetManyTimesServer{stream})
}

type GreetSErvice_GreetManyTimesServer interface {
	Send(*GreetResponse) error
	grpc.ServerStream
}

type greetSErviceGreetManyTimesServer struct {
	grpc.ServerStream
}

func (x *greetSErviceGreetManyTimesServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GreetSErvice_ServiceDesc is the grpc.ServiceDesc for GreetSErvice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetSErvice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetSErvice",
	HandlerType: (*GreetSErviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetSErvice_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetManyTimes",
			Handler:       _GreetSErvice_GreetManyTimes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "greet.proto",
}
